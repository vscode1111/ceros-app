/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claimed = ContractEventLog<{
  owner: string;
  recipient: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Deposited = ContractEventLog<{
  owner: string;
  recipient: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type RatioUpdated = ContractEventLog<{
  currentRatio: string;
  0: string;
}>;
export type RouterChanged = ContractEventLog<{
  router: string;
  0: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Withdrawn = ContractEventLog<{
  owner: string;
  recipient: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface YieldConverter extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): YieldConverter;
  clone(): YieldConverter;
  methods: {
    changeRouter(router: string): NonPayableTransactionObject<void>;

    claimYields(recipient: string): NonPayableTransactionObject<string>;

    claimYieldsFor(
      owner: string,
      recipient: string
    ): NonPayableTransactionObject<string>;

    deposit(amount: number | string | BN): NonPayableTransactionObject<string>;

    depositFor(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    getCeTokenBalanceOf(account: string): NonPayableTransactionObject<string>;

    getClaimedOf(account: string): NonPayableTransactionObject<string>;

    getDepositOf(account: string): NonPayableTransactionObject<string>;

    getName(): NonPayableTransactionObject<string>;

    getPrincipalOf(account: string): NonPayableTransactionObject<string>;

    getTotalAmountInVault(): NonPayableTransactionObject<string>;

    getYieldFor(account: string): NonPayableTransactionObject<string>;

    initialize(
      name: string,
      ceTokenAddress: string,
      aBNBcAddress: string
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    paused(): NonPayableTransactionObject<boolean>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    withdraw(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    withdrawFor(
      owner: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    Deposited(cb?: Callback<Deposited>): EventEmitter;
    Deposited(options?: EventOptions, cb?: Callback<Deposited>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    RatioUpdated(cb?: Callback<RatioUpdated>): EventEmitter;
    RatioUpdated(
      options?: EventOptions,
      cb?: Callback<RatioUpdated>
    ): EventEmitter;

    RouterChanged(cb?: Callback<RouterChanged>): EventEmitter;
    RouterChanged(
      options?: EventOptions,
      cb?: Callback<RouterChanged>
    ): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    Withdrawn(cb?: Callback<Withdrawn>): EventEmitter;
    Withdrawn(options?: EventOptions, cb?: Callback<Withdrawn>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;

  once(event: "Deposited", cb: Callback<Deposited>): void;
  once(
    event: "Deposited",
    options: EventOptions,
    cb: Callback<Deposited>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "RatioUpdated", cb: Callback<RatioUpdated>): void;
  once(
    event: "RatioUpdated",
    options: EventOptions,
    cb: Callback<RatioUpdated>
  ): void;

  once(event: "RouterChanged", cb: Callback<RouterChanged>): void;
  once(
    event: "RouterChanged",
    options: EventOptions,
    cb: Callback<RouterChanged>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;

  once(event: "Withdrawn", cb: Callback<Withdrawn>): void;
  once(
    event: "Withdrawn",
    options: EventOptions,
    cb: Callback<Withdrawn>
  ): void;
}
